<h1>ï¼­aps</h1>

<!DOCTYPE html>
<html>
<head>
  <title>Simple Map</title>
  <meta name="viewport" content="initial-scale=1.0">
  <meta charset="utf-8">
  <style>
  </style>
</head>
<body>
  <h1><%= @trip.name%></h1>
  <div>
    <%= image_tag @trip.image, width: '240px' if @trip.image? %>
  </div>
  <% @trip.sites.each do |site|%>
    <div><%= site.name %></div>
    <div>
      <%= image_tag site.photo, width: '120px' if site.photo? %>
    </div>
  <%end%>



  <div id="map"></div>
  <script>
    var map = null;
    var gostationMarkers = [];
    var siteMarkers = [];
    var friendlyStoreMarkers = [];
    var currentPositionMarker = null;
    var destinationMarker = null;
    var directionsService = null;
    var directionsDisplay = null;

    // map icons
    var i_green_black_battery = null;
    var i_green_black_battery_sm = null;
    var ig_green_black_battery = null;
    var i_blue_black_battery = null;
    var ig_blue_black_battery = null;
    var i_site = null;
    var i_site_sm = null;
    var ig_site = null;
    var friendly_store_icon = null;
    var friendly_store_icon_onclick = null;

    var activeMarkerInfo = {
      marker: null,
      bFriendlyStore: false,
      bGostationSite: false
    };
    function addMarker(props){
      console.log("addMarker ----------------- 1")
      console.log(props)
      console.log("addMarker ----------------- 2")
      var marker = new google.maps.Marker({
        position: props.position,
        animation: google.maps.Animation.DROP,
        map: map,
        icon: props.iconImage
      });

      if(props.id == markerType.SITE){
        marker.infowindow = new google.maps.InfoWindow({
          content: props.title
        });
      }

      if(props.directions_url){
        marker.addListener('click', function(){
          // --- switch marker icon
          if(props.id>=0 || props.id==markerType.FRIENDLY_STORE || props.id==markerType.SITE){
            if(activeMarkerInfo.marker!=null){
              if(activeMarkerInfo.bFriendlyStore){
                activeMarkerInfo.marker.setIcon(friendly_store_icon);
              }
              else if(activeMarkerInfo.bGostationSite){
                if(toggleGostationSite){
                  activeMarkerInfo.marker.setIcon(i_site);
                }
                else{
                  activeMarkerInfo.marker.setIcon(i_site_sm);
                }
              }
              else{
                if(toggleGostationSite){
                  activeMarkerInfo.marker.setIcon(i_green_black_battery_sm);
                }
                else{
                  activeMarkerInfo.marker.setIcon(i_green_black_battery);
                }
              }
            }
          }

          if(props.id >= 0){//gostations
            if(toggleGostationSite){
              marker.setIcon(i_green_black_battery_sm);
            }
            else{
              marker.setIcon(ig_green_black_battery);
            }
            activeMarkerInfo.marker = marker;
            activeMarkerInfo.bFriendlyStore = false;
            activeMarkerInfo.bGostationSite = false;

            // get id of trip_gostation
            currentTripGostationId = -1;
            for(var i=0; i<gon.trip_gostations.length; i++){
              if(props.id==gon.trip_gostations[i].gostation_id){
                currentTripGostationId = gon.trip_gostations[i].id;
              }
            }

            var bCloseGostation = false;
            if( checkLatLngNearby(userCurrentPos, props.position, 0.005) ){//0.005 = 500m
              bCloseGostation = true;
            }
            bCloseGostation = true;//for debug

            var disDurPromise = promiseCalculateDisDur(props.position);

            disDurPromise
            .then(function(results) {
              $.ajaxSetup({
                headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') }
              });
              $.ajax({
                url: "/trip_gostations/"+currentTripGostationId+"/getCheckinStatus",
                method: "POST",
                dataType: "json",
                success: function(data){
                  props.distance = results.distance;
                  props.duration = results.duration;
                  props.bCheckin = data.status;
                  props.bCloseGostation = bCloseGostation;
                  setMarkerModalInfo(props);
                  $('#tripModalCenter').modal();
                },

                error: function() {
                  alert("ERROR: can not getCheckinStatus!");
                }

              });
            })
            .catch(function(err) {
              console.log("Can not get disDur");
            });
          }
          else if(props.id == markerType.FRIENDLY_STORE || props.id == markerType.SITE){//friendly stores

            if(props.id == markerType.FRIENDLY_STORE){
              marker.setIcon(friendly_store_icon_onclick);
              activeMarkerInfo.bFriendlyStore = true;
              activeMarkerInfo.bGostationSite = false;
            }
            else if(props.id == markerType.SITE){
              if(toggleGostationSite){
                marker.setIcon(ig_site);
              }
              else{
                marker.setIcon(i_site_sm);
              }
              activeMarkerInfo.bFriendlyStore = false;
              activeMarkerInfo.bGostationSite = true;
            }
            activeMarkerInfo.marker = marker;

            var disDurPromise = promiseCalculateDisDur(props.position);
            disDurPromise
            .then(function(results) {
              props.distance = results.distance;
              props.duration = results.duration;
              if(props.id == markerType.FRIENDLY_STORE){
                setMarkerModalInfo(props);
                $('#tripModalCenter').modal();
              }
              else{
                setSiteMarkerModalInfo(props);
                $('#siteModalCenter').modal();
              }

            })
            .catch(function(err) {
              console.log("Can not get disDur");
            });
          }

        });
      }
      
      if(props.id >= 0){//gostations
        gostationMarkers.push(marker);
      }
      else if(props.id == markerType.FRIENDLY_STORE){//friendly stores
        friendlyStoreMarkers.push(marker);
      }
      else if(props.id == markerType.DESTINATION){
        destinationMarker = marker;
      }
      else if(props.id == markerType.CURRENT_LOCATION){
        currentPositionMarker = marker;
      }
      else if(props.id == markerType.SITE){
        siteMarkers.push(marker);
      }
      
    }

    function displayGostations(route) {
      console.log("**displayGostations**");
      return; //xxxxx
      // --- create milestones
      var milestones = createMilestone(route, 1000);

      setMarkerInfo({
        gostations: gon.gostations,
        milestones: milestones
      });
    };

    function displaySites(){
      console.log("**displaySites**");
      return; //xxxxx

      if(siteMarkers.length>0){ return; }

      for(var i=0; i<gon.gostation_sites.length; i++){
        var position = {
          lat: +gon.gostation_sites[i].latitude,
          lng: +gon.gostation_sites[i].longitude
        };

        var info = {

          title: gon.gostation_sites[i].name,
          content: gon.gostation_sites[i].description,
          storePhoto: "../images/"+gon.gostation_sites[i].photo,
          totalBatteryCells: 0
        }
        info.position = position;
        info.directions_url = getDirectionUrl(position.lat+','+position.lng);
        info.id = markerType.SITE;
        info.iconImage = i_site;

        console.log("displaySites ----------------- 1")
        console.log(info)
        console.log("displaySites ----------------- 2")
        addMarker(info);
      }
    }


    function getBoundsZoomLevel(mapWidth, mapHeight) {
      console.log("**getBoundsZoomLevel**");
      //if(gon.gostations.length <= 0){ return 8; }
      if(1){ return 15; }

      var bounds = calculateGostationBounds();
      var WORLD_DIM = { height: 256, width: 256 };
      var ZOOM_MAX = 21;

      function latRad(lat) {
          var sin = Math.sin(lat * Math.PI / 180);
          var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;
          return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;
      }

      function zoom(mapPx, worldPx, fraction) {
          return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);
      }

      var ne = bounds.ne;
      var sw = bounds.sw;

      var latFraction = (latRad(ne.lat) - latRad(sw.lat)) / Math.PI;

      var lngDiff = ne.lng - sw.lng;
      var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;

      var latZoom = zoom(mapHeight, WORLD_DIM.height, latFraction);
      var lngZoom = zoom(mapWidth, WORLD_DIM.width, lngFraction);

      return Math.min(latZoom, lngZoom, ZOOM_MAX);
    }

    function initMapX() {

      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 15, 
        center: {lat: 24.98367, lng: 121.453586}
      });

      var myLatLng = {lat: 24.98367, lng: 121.453586};
      var marker = new google.maps.Marker({
        position: myLatLng,
        map: map,
        title: 'Hello World!'
      });
      // To add the marker to the map, call setMap();
      marker.setMap(map);
    }


    function initMap() {
      directionsService = new google.maps.DirectionsService;
      directionsDisplay = new google.maps.DirectionsRenderer;
      map = new google.maps.Map(document.getElementById('map'), {
        //zoom: 10,
        zoom: 15,
        //center: calculateGostationCenter(),
        center: {lat: 24.98367, lng: 121.453586},
        styles: googleMapStyle,
        // specify map controls
        minZoom: 8,
        maxZoom: 16,
        mapTypeControl: false,
        fullscreenControl: false,
        streetViewControl: false,
        zoomControl: false
      });

      // dynamic calculate zoom level
      var zoomLevel = getBoundsZoomLevel(350, 250);
      map.setZoom(zoomLevel);

      i_green_black_battery = {
        url: "../icons/i_green_black_battery.png",
        scaledSize: new google.maps.Size(28, 32)
      };

      i_green_black_battery_sm = {
        url: "../icons/i_green_black_battery.png",
        scaledSize: new google.maps.Size(14, 16)
      };

      ig_green_black_battery = {
        url: "../icons/ig_green_black_battery.png",
        scaledSize: new google.maps.Size(42, 48)
      };

      i_blue_black_battery = {
        url: "../icons/i_blue_black_battery.png",
        scaledSize: new google.maps.Size(28, 32)
      };

      ig_blue_black_battery = {
        url: "../icons/ig_blue_black_battery.png",
        scaledSize: new google.maps.Size(42, 48)
      };

      friendly_store_icon = {
        url: "../icons/Shop.png",
        scaledSize: new google.maps.Size(28, 32)
      };

      friendly_store_icon_onclick = {
        url: "../icons/Shop.png",
        scaledSize: new google.maps.Size(35, 40)
      };

      i_site = {
        url: "../icons/i_site.png",
        scaledSize: new google.maps.Size(28, 36)
      };

      i_site_sm = {
        url: "../icons/i_site.png",
        scaledSize: new google.maps.Size(14, 18)
      };

      ig_site = {
        url: "../icons/ig_site.png",
        scaledSize: new google.maps.Size(35, 45)
      };

      directionsDisplay.setMap(map);

      // Create the DIV to hold the control and call the FriendlyStoreControl()
      // constructor passing in this DIV.
      var friendlyStoreDiv = document.createElement('div');
      var friendlyStoreControl = new tripFriendlyStoreControl(friendlyStoreDiv, map);

      friendlyStoreDiv.index = 1;
      map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(friendlyStoreDiv);


      // Create the DIV to hold the control and call the GostationSiteControl()
      // constructor passing in this DIV.
      var gostationSiteDiv = document.createElement('div');
      var gostationSiteControl = new GostationSiteControl(gostationSiteDiv, map);

      gostationSiteDiv.index = 2;
      map.controls[google.maps.ControlPosition.LEFT_BOTTOM].push(gostationSiteDiv);


      // find current position of user
      trip_show_getCurrentPosition();

      displaySites();
      setMarkersIcon(siteMarkers, i_site_sm);
      displayGostations();
    }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBlueY1pKWgE_uhgFbjH8_cO2CjJCERaA&callback=initMap"
  async defer></script>
</body>
</html>